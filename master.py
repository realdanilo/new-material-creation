# -*- coding: utf-8 -*-
"""Master.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IsB2vZ26Amv9Pqc2KyJpmd2vaMkj_9Te
"""

!pip install -q xlrd
import pandas as pd
# regex
# import re
import datetime
EU_day = datetime.datetime.now().strftime('%d.%m.%Y')
 

df = pd.read_excel('/content/TESTING MASTER.xlsx')
df = df.values.tolist()
# 
# 
# MASTER INFO
# Headers indexed
# 1 => MATFS
# 2 => MATKL
# 3 => WERKS
# 4 => LIFNR
# 5 => IDNLF
# 6 => MAKTX
# 7 => MEINS
# 8 => MINBE
# 9 => MABST
# 10 => BSTRF
# 11 => VERPR
# 12 => KBETR
# 13 => EAN11
# 14 => PRDHA
# 15 => MTART
# 16 => BISMT 
# 17 => EXTWG
# 18 => RAUBE
# 19 => EKGRP
# 20 => SERNP
# 21 => LGORT
# 22 => VPRSV
# 23 => FLIFN 
# 24 => AUTET
# 25 => KSCHL
# 26 => REGIO
# 27 => TELF1
# 28 => KOTAB
# 29 => KPEIN
# 30 => EKORG


# Assigning variables
MATFS = []
MATKL = []
WERKS = []
LIFNR = []
IDNLF = []
MAKTX = []
MEINS = []
MINBE = []
MABST = []
BSTRF = []
VERPR = []
KBETR = []
EAN11 = []
PRDHA = []
# MTART = []
BISMT = [] 
# EXTWG = []
# RAUBE = []
EKGRP = [] 
# SERNP = []
# LGORT = []
# VPRSV = []
# FLIFN = [] 
# AUTET = []
# KSCHL = []
REGIO = []
TELF1 = []
# KOTAB = []
# KPEIN = []
# EKORG = []

# MARD Vars
MATFS_MARD = []
WERKS_MARD = []
LGORT_MARD = []
DISKZ_MARD = []
# MARD info
lgort_info = [1000,9000,"STOD"]
diskz_info = ["",1,1]


# SALES_KOND vars 
MATFS_SALES = []
# KOPOS_SALES = []
# KAPPL_SALES = []
# KBSTAT_SALES = []
# KOTAB_SALES = [] 
# KSCHL_SALES = []
YYSREG_SALES = []
KBETR_SALES = []



# LOOPS THRU LIST AND GIVE VALUE TO VARS,
for row in df:
  # MATFS.append(row[1])
  MATFS.append(row[1])
  MATKL.append(row[2])
  WERKS.append(row[3])
  LIFNR.append(row[4])
  IDNLF.append(row[5])
  MAKTX.append(row[6])
  MEINS.append(row[7])
  MINBE.append(row[8])
  MABST.append(row[9])
  BSTRF.append(row[10])
  VERPR.append(row[11])
  KBETR.append(row[12])
  EAN11.append(row[13])
  PRDHA.append(row[14])
  # MTART.append(row[15])
  BISMT.append(row[16]) 
  # EXTWG.append(row[17])
  # RAUBE.append(row[18])
  EKGRP.append(row[19])
  # SERNP.append(row[20])
  # LGORT.append(row[21])
  # VPRSV.append(row[22])
  # FLIFN.append(row[23]) 
  # AUTET.append(row[24])
  # KSCHL.append(row[25])
  REGIO.append(row[26])
  TELF1.append(row[27])
  # KOTAB.append(row[28])
  # KPEIN.append(row[29])
  # EKORG.append(row[30])
  
  # LOOP FOR MARD
  for x in range(4):
    # ADDING VALS FOR SALES_KOND
    MATFS_SALES.append(row[1])
    YYSREG_SALES.append(f"0{x+1}")
    KBETR_SALES.append(row[12])
    # ADDING VALS FOR  MARD 
    if x <3:
      MATFS_MARD.append(row[1])
      WERKS_MARD.append(1130)
      LGORT_MARD.append(lgort_info[x])
      DISKZ_MARD.append(diskz_info[x])
      





# 1.0 MARA 
MARA_df = pd.DataFrame({"MATFS":MATFS, "MTART":"YACE", "MBRSH":"1", "MATKL":MATKL,  "MEINS":MEINS,  "EAN11":EAN11,   "NUMTP": "ZC",  "BRGEW": "1",  "GEWEI":"LB",  "BISMT":BISMT,  "EXTWG":"300-01",  "PRDHA":PRDHA, "TRAGR":"0001", "MTPOS_MARA":"NORM","GROES":"",  "RAUBE":""})
MARA_df.to_excel("/content/testing folder/MARA.xlsx",index=False)  

# 2.0 MAKT
MAKT_df = pd.DataFrame({"MATFS":MATFS, "SPRAS":"EN","MAKTX":MAKTX,"MAKTX2":MAKTX})
MAKT_df.to_excel("/content/testing folder/MAKT.xlsx",index=False)

# 3.0 MLAN
MLAN_df = pd.DataFrame({"MATFS":MATFS,"ALAND":"US","TATYP1":"UTXJ","TAXKM1":1})
MLAN_df.to_excel("/content/testing folder/MLAN.xlsx",index=False)


# 4.0 MARC
MARC_df = pd.DataFrame({"MATFS":MATFS, "WERKS":WERKS,"DISMM":"V1","DISLS":"HB", "/FIS/M_KZLAG":"YW-1", "MINBE":MINBE, "MABST":MABST, "BSTRF":BSTRF,"LGRAD":97,"DISPO":"01","PLIFZ":1,"EKGRP":EKGRP, "MTVFP":"02", "LGFSB":1000,"PRMOD":"","PERKZ":"M", "PERAN":"", "ANZPR":"", "PERIN":"", "KZINI":"", "MODAV":"", "PRCTR":WERKS, "SBDKZ":2, "BESKZ":"F", "KAUTB":"X", "LADGR":"0001", "FHORI":"","DISGR":"0000" })
MARC_df.to_excel("/content/testing folder/MARC.xlsx",index=False)

# 5.0 MARD
MARD_df = pd.DataFrame({"MATFS":MATFS_MARD,"WERKS":WERKS_MARD,"LGORT":LGORT_MARD, "DISKZ":DISKZ_MARD})
MARD_df.to_excel("/content/testing folder/MARD.xlsx",index=False)


# 9.0 MVKE
MVKE_df = pd.DataFrame({"MATFS":MATFS,"VKORG":3000,"VTWEG":"01","/FIS/RBGRP":"Y000","MTPOS":"NORM","PRODH":"1a100","KTGRM":"01","SKTOF":"X"})
MVKE_df.to_excel("/content/testing folder/MVKE.xlsx",index=False)


# 10.0 MBEW
MBEW_df = pd.DataFrame({"MATFS":MATFS,"BWKEY":1130,"BKLAS":"V400","VPRSV":"V", "PEINH":1,"VERPR":VERPR})
MBEW_df.to_excel("/content/testing folder/MBEW.xlsx",index=False)


# 12.0 EINA
EINA_df = pd.DataFrame({"MATFS":MATFS,"LIFNR":LIFNR, "MEINS":MEINS, "IDNLF":IDNLF, "URZLA":"US","UMREZ":1, "UMREN":1, "REGIO":REGIO, "TELF1":TELF1})
EINA_df.to_excel("/content/testing folder/EINA.xlsx",index=False)


# 14.0 EORD
EORD_df = pd.DataFrame({"MATFS":MATFS,"WERKS":WERKS, "ZEORD":1,"VDATU":EU_day,"BDATU":"31.12.2999","LIFNR":LIFNR,"FLIFN":x, "EKORG":3000,"AUTET":1})
EORD_df.to_excel("/content/testing folder/EORD.xlsx",index=False)


# PURCH KOND
PURCH_KOND_df = pd.DataFrame({"MATFS":MATFS, "KOPOS":1, "KAPPL":"M", "KOTAB":"A983","KSCHL":"YAB1","LIFNR":LIFNR,"EKORG":"","/FIS/EKORZ":3000,"KSTBM":"","KONMS":"EA","KBETR":VERPR, "KONWA":"USD", "KMEIN":"EA", "KPEIN":1.000, "MEINS":"EA", "DATAB":EU_day, "DATBI":"31.12.2999","KLFN1":"0000","STFKZ":"A","KOSTKZ":"","KOTABNR":983,"LOEVM_KO":"","KLFKA":"","CR_DELBI":""})
PURCH_KOND_df.to_excel("/content/testing folder/PURCH.xlsx",index=False)


# SAKES_KOND 
SAKES_KOND_DF = pd.DataFrame({"MATFS":MATFS_SALES,  "KOPOS":1, "KAPPL":"V", "KBSTAT":"", "KOTAB":"A903", "KSCHL":"Y001","VKORG":3000,"VTWEG":"01", "KFRST":"", "YYSREG":YYSREG_SALES, "KBETR":KBETR_SALES, "KONWA":"USD", "KMEIN":"EA", "KPEIN":1.000,"MEINS":"EA","DATAB":EU_day, "DATBI":"31.12.2999", "KLFN1":"0000","STFKZ":"A","KOSTKZ":"", "KOTABNR":"903"})
SAKES_KOND_DF.to_excel("/content/testing folder/SALES.xlsx",index=False)




# to export as dict
# rangeRegions =[]
# materials =[]
# baseMeasurement=[]
# salesListPrice = []
# purchIncrease =[]

# for row in df:
#   purch2021 = row[16]
#   salesPrice = row[18]
#   notNumbs = type(purch2021)==str or type(salesPrice)==str
#   for x in range(4):
#     if notNumbs: 
#       print(purch2021, salesPrice) 
#       continue
#     rangeRegions.append(f"0{x+1}")
#     materials.append(row[0])
#     baseMeasurement.append(row[9])
#     salesListPrice.append(row[18])
   
# # making csv
# newDf = pd.DataFrame({"regions":rangeRegions, "material":materials,"Description":"", "Amount":salesListPrice, "USD":"","per":"","Calc":"","UoM":"","Scale Basis":"","Valid":"06/01/2021"})
# # adds zero on loop, tells excel to treat entry as formula that returns text format
# newDf['regions'] = newDf['regions'].apply('="{}"'.format)
# newDf['Valid'] = newDf['Valid'].apply('="{}"'.format)
 
# # export
# newDf.to_csv("newDF.csv", index=False)

print("Done!")

import datetime

x = datetime.datetime.now().strftime('%d.%m.%Y')
# print(f"{x[2]}.{x[1]}.{x[0]}")
print(x)